{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","exp","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","console","log","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"0KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,YAkBDC,EADH,CAAEC,OAfC,WAEb,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAarBC,OAVP,SAAAC,GAEb,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQbI,OALf,SAACC,EAAIH,GAElB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UC+F5BO,EA1GH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,0BAAjD,mBAAqBO,GAArB,WAEAC,qBAAU,WAERC,EACGtB,SACAG,MAAK,SAAAoB,GACJR,EAASQ,QAEZ,IAGH,IA2CMC,EAAcN,EAClBJ,EACAA,EAAMW,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAG5B,OAFAgC,QAAQC,IAAIb,GAGV,gCACE,uCADF,SAGK,8BACD,yBAAQjB,QAAS,kBAAMsB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGM,EAAYI,KAAI,SAACrC,EAAMsC,GAAP,OACb,cAAC,EAAD,CAEEtC,KAAMA,EACNC,iBAAkB,kBA9DH,SAACkB,GAC1B,IAAMnB,EAAOuB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAErB,KAAOA,KAChCsB,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD4B,EACGb,OAAOC,EAAIsB,GACX7B,MAAK,SAAA8B,GACJlB,EAASD,EAAMc,KACb,SAAArC,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAO0C,SAGnCC,OAAM,SAAAC,GACLf,EAAgB,SAAD,OACJ7B,EAAKK,QADD,sCAGfwC,YAAW,WACThB,EAAgB,QACf,KACHL,EAASD,EAAMW,QAAO,SAAAM,GAAC,OAAIA,EAAErB,KAAOA,SA4CN2B,CAAmB9C,EAAKmB,MAF3CnB,EAAKmB,SAMlB,uBAAM4B,SA5CM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASoB,EACT0B,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAE7BxB,EACGhB,OAAOmC,GACPtC,MAAK,SAAA8B,GACJlB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,QAiCb,UACE,uBACE+B,MAAOhC,EACPiC,SA/BiB,SAACV,GAExBtB,EAAWsB,EAAMW,OAAOF,UA+BpB,wBAAQG,KAAK,SAAb,yB,MCxFRC,IAASC,OACR,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7a29f031.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\n\nconst baseUrl = 'api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst exp = { getAll, create, update }\nexport default exp","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n// import axios from 'axios'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    // console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  // console.log('render', notes.length, 'notes')\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(\n          note => note.id !== id ? note : returnedNote\n        ))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n  }\n\n  const handleNoteChange = (event) => {\n    // console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n  console.log(notes)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n{/*      <Notification message={errorMessage} />\n*/}      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map((note, i) => \n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n)"],"sourceRoot":""}